@page "/events"
@using JitDalshe.Ui.Admin.Api
@using JitDalshe.Ui.Admin.Components.Events
@using JitDalshe.Ui.Admin.Extensions
@using JitDalshe.Ui.Admin.Models
@inject IApiFacade Api
@inject IToastService ToastService
@inject IJSRuntime JsRuntime

<PageTitle>События</PageTitle>

<div class="topbar-container">
    <h1>События</h1>
    <button class="btn btn-secondary btn-show-create-modal"
            @onclick="ShowCreateEventModalAsync">
        + Добавить
    </button>
</div>
@if (_events is not null)
{
    @foreach (var eventItem in _events)
    {
        <EventCard Event="eventItem" OnEventEditedCallback="LoadEventsAsync" OnEventDeletedCallback="LoadEventsAsync"/>
    }
}
else
{
    <p>Loading...</p>
}

<CreateEventModal Id="@CreateEventModalId" EventCreated="LoadEventsAsync"/>

@code {
    private const string CreateEventModalId = "modal_create_event";
    private Event[] _events = null!;

    private async Task LoadEventsAsync()
    {
        try
        {
            _events = await Api.ListEventsAsync(
                defaultValue: [],
                onErrorCallback: error => ToastService.ShowError(error.Message));
        }
        catch (Exception e)
        {
            ToastService.ShowPermanentError(e);
            _events = [];
        }
    }

    private async Task ShowCreateEventModalAsync()
    {
        await JsRuntime.InvokeVoidAsync("showModal", $"#{CreateEventModalId}");
    }

    protected override Task OnInitializedAsync()
        => LoadEventsAsync();

}