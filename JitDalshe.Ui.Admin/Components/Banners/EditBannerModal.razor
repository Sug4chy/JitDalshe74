@using JitDalshe.Ui.Admin.Api.Banners.Requests
@using JitDalshe.Ui.Admin.Components.Shared.Modals
@using JitDalshe.Ui.Admin.Models
@using JitDalshe.Ui.Admin.Components.Shared.Forms
@using JitDalshe.Ui.Admin.Models.Forms
@using JitDalshe.Ui.Admin.Services.BannerService
@using JitDalshe.Ui.Admin.Services.ModalService
@inject IModalService ModalService
@inject IBannerService BannerService
@inject IToastService ToastService

<Modal Id="@Id"
       Static="true"
       Title="Редактирование баннера"
       OnClose="@CloseModalAsync"
       Footer="Modal.FooterType.Button"
       FooterButtonText="Сохранить"
       OnFooterButtonClick="@SubmitEditBannerAsync">

    <EditForm EditContext="@_editContext">
        <FluentValidationValidator @ref="_fluentValidationValidator"/>

        <UploadFile @bind-FileUrl="_formModel.ImageUrl"/>

        <TextInput Label="Заголовок" @bind-Value="_formModel.Title"/>

        <CheckboxInput Label="Отображать на сайте?" @bind-Value="_formModel.IsDisplaying"/>

        @if (_formModel.IsDisplaying)
        {
            <NumberInput Label="Порядковый номер отображения" @bind-Value="_formModel.DisplayingOrder"/>
        }

        <CheckboxInput Label="Кликабелен?" @bind-Value="_formModel.IsClickable"/>

        @if (_formModel.IsClickable)
        {
            <TextInput Label="Куда переводит?" @bind-Value="_formModel.RedirectOnClickUrl"/>
        }

    </EditForm>

</Modal>

@code {

    private BannerFormModel _formModel = null!;
    private EditContext? _editContext;
    private FluentValidationValidator? _fluentValidationValidator;

    [Parameter] public required string Id { get; init; }
    [Parameter] public required Banner Banner { get; init; }
    [Parameter] public required EventCallback BannerEdited { get; init; }

    private void RefreshFields(bool isInitializing)
    {
        _formModel = new BannerFormModel(
            title: Banner.Title,
            imageUrl: Banner.ImageUrl,
            isDisplaying: Banner.DisplayOrder is not null,
            displayingOrder: Banner.DisplayOrder ?? 0,
            isClickable: Banner.RedirectOnClickUrl is not null,
            redirectOnClickUrl: Banner.RedirectOnClickUrl ?? string.Empty
        );
        _editContext = new EditContext(_formModel);
        if (!isInitializing)
        {
            StateHasChanged();
        }
    }

    private Task HideModalAsync()
        => ModalService.HideModalAsync($"#{Id}");

    private async Task CloseModalAsync()
    {
        RefreshFields(false);
        await HideModalAsync();
    }

    private async Task SubmitEditBannerAsync()
    {
        if (!await _fluentValidationValidator!.ValidateAsync())
        {
            return;
        }

        var request = new EditBannerRequest(
            Title: _formModel.Title,
            IsClickable: _formModel.IsClickable,
            RedirectOnClickUrl: _formModel.IsClickable ? _formModel.RedirectOnClickUrl : null,
            DisplayOrder: _formModel.IsDisplaying ? _formModel.DisplayingOrder : null);

        if (await BannerService.EditBannerAsync(Banner.Id, request))
        {
            if (_formModel.ImageUrl != Banner.ImageUrl)
            {
                await BannerService.ReplaceBannerImageAsync(
                    Banner.Id, new ReplaceBannerImageRequest(_formModel.ImageUrl!)
                );
            }

            await CloseModalAsync();
            ToastService.ShowSuccess("Баннер успешно изменён!");
            await BannerEdited.InvokeAsync();
        }
    }

    protected override void OnInitialized()
    {
        RefreshFields(true);
    }

}