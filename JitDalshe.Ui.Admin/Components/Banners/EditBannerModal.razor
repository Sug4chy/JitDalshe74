@using JitDalshe.Ui.Admin.Api.Banners.Requests
@using JitDalshe.Ui.Admin.Components.Shared.Modals
@using JitDalshe.Ui.Admin.Models
@using JitDalshe.Ui.Admin.Components.Shared.Forms
@using JitDalshe.Ui.Admin.Services.BannerService
@using JitDalshe.Ui.Admin.Services.ModalService
@inject IModalService ModalService
@inject IBannerService BannerService
@inject IToastService ToastService

<Modal Id="@Id"
       Static="true"
       Title="Редактирование баннера"
       OnClose="@CloseModalAsync"
       Footer="Modal.FooterType.Button"
       FooterButtonText="Сохранить"
       OnFooterButtonClick="@SubmitEditBannerAsync">

    <UploadFile @bind-FileUrl="_imageUrl"/>

    <TextInput Label="Заголовок" @bind-Value="_title"/>

    <CheckboxInput Label="Отображать на сайте?" @bind-Value="_isDisplaying"/>

    @if (_isDisplaying)
    {
        <NumberInput Label="Порядковый номер отображения" @bind-Value="_displayingOrder"/>
    }

    <CheckboxInput Label="Кликабелен?" @bind-Value="_isClickable"/>

    @if (_isClickable)
    {
        <TextInput Label="Куда переводит?" @bind-Value="_redirectOnClickUrl"/>
    }

</Modal>

@code {

    private string _title = null!;
    private string _imageUrl = null!;
    private bool _isDisplaying;
    private int _displayingOrder;
    private bool _isClickable;
    private string? _redirectOnClickUrl;

    [Parameter] public required string Id { get; init; }
    [Parameter] public required Banner Banner { get; init; }
    [Parameter] public required EventCallback BannerEdited { get; init; }

    private void RefreshFields()
    {
        _title = Banner.Title;
        _imageUrl = Banner.ImageUrl;
        _isDisplaying = Banner.DisplayOrder is not null;
        _displayingOrder = Banner.DisplayOrder ?? 0;
        _isClickable = Banner.RedirectOnClickUrl is not null;
        _redirectOnClickUrl = Banner.RedirectOnClickUrl;
    }

    private Task HideModalAsync()
        => ModalService.HideModalAsync($"#{Id}");

    private async Task CloseModalAsync()
    {
        RefreshFields();
        await HideModalAsync();
    }

    private async Task SubmitEditBannerAsync()
    {
        var request = new EditBannerRequest(
            Title: _title,
            IsClickable: _isClickable,
            RedirectOnClickUrl: _redirectOnClickUrl,
            DisplayOrder: _isDisplaying ? _displayingOrder : null);

        if (await BannerService.EditBannerAsync(Banner.Id, request))
        {
            if (_imageUrl != Banner.ImageUrl)
            {
                await BannerService.ReplaceBannerImageAsync(Banner.Id, new ReplaceBannerImageRequest(_imageUrl));
            }

            await CloseModalAsync();
            ToastService.ShowSuccess("Баннер успешно изменён!");
            await BannerEdited.InvokeAsync();
        }
    }

    protected override void OnInitialized()
    {
        RefreshFields();
    }

}