@using JitDalshe.Ui.Admin.Api.Banners.Requests
@using JitDalshe.Ui.Admin.Components.Shared.Modals
@using JitDalshe.Ui.Admin.Components.Shared.Forms
@using JitDalshe.Ui.Admin.Services.BannerService
@using JitDalshe.Ui.Admin.Services.ModalService
@inject IModalService ModalService
@inject IBannerService BannerService
@inject IToastService ToastService

<Modal Id="@Id"
       Static="true"
       Title="Создание нового баннера"
       OnClose="@CloseModalAsync"
       Footer="Modal.FooterType.Button"
       FooterButtonText="Сохранить"
       OnFooterButtonClick="@SubmitCreateBannerAsync">

    <UploadFile @bind-FileUrl="_imageUrl"/>

    <TextInput Label="Заголовок" @bind-Value="_title"/>

    <CheckboxInput Label="Отображать на сайте?" @bind-Value="_isDisplaying"/>

    @if (_isDisplaying)
    {
        <NumberInput Label="Порядковый номер отображения" @bind-Value="_displayingOrder"/>
    }

    <CheckboxInput Label="Кликабелен?" @bind-Value="_isClickable"/>

    @if (_isClickable)
    {
        <TextInput Label="Куда переводит?" @bind-Value="_redirectOnClickUrl"/>
    }

</Modal>

@code {

    private string _title = null!;
    private string? _imageUrl;
    private bool _isDisplaying;
    private int _displayingOrder;
    private bool _isClickable;
    private string? _redirectOnClickUrl;

    [Parameter] public required string Id { get; init; }
    [Parameter] public required EventCallback BannerCreated { get; init; }

    private void RefreshFields()
    {
        _title = string.Empty;
        _imageUrl = string.Empty;
        _isDisplaying = false;
        _displayingOrder = 0;
        _isClickable = false;
        _redirectOnClickUrl = null;
    }

    private Task HideModalAsync()
        => ModalService.HideModalAsync($"#{Id}");

    private async Task CloseModalAsync()
    {
        await HideModalAsync();
        RefreshFields();
    }

    private async Task SubmitCreateBannerAsync()
    {
        if (_imageUrl is null)
        {
            ToastService.ShowInfo("Пожалуйста, прикрепите изображение");
            return;
        }

        var request = new CreateBannerRequest(
            Title: _title,
            ImageBase64Url: _imageUrl,
            IsClickable: _isClickable,
            RedirectOnClickUrl: _redirectOnClickUrl,
            DisplayOrder: _isDisplaying ? _displayingOrder : null);
        if (await BannerService.CreateBannerAsync(request))
        {
            await CloseModalAsync();
            ToastService.ShowSuccess("Баннер успешно создан!");
            await BannerCreated.InvokeAsync();
        }
    }

}