@using JitDalshe.Ui.Admin.Models
@inject IJSRuntime JsRuntime

<div id="@Id"
     class="modal fade"
     tabindex="-1"
     aria-hidden="true"
     data-backdrop="static"
     data-keyboard="false">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modal_@News.Id">@News.Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="gap-3 horizontal-scroll">
                    <InputRadioGroup class="mb-4"
                                     TValue="Guid"
                                     ValueChanged="e => PrimaryPhotoSelected(e)"
                                     ValueExpression="() => _selectedPhotoId">
                        @foreach (var photo in News.Photos)
                        {
                            <label
                                class="image-radio @(photo.Id == _selectedPhotoId ? "selected" : string.Empty)">
                                <InputRadio TValue="Guid"
                                            Value="photo.Id"
                                            style="display: none"/>
                                <img src="@photo.Uri" class="img-thumbnail rounded" alt=""/>
                            </label>
                        }
                    </InputRadioGroup>
                </div>
                <InputTextArea @bind-Value="News.Text"
                               style="width: 100%; height: 400px"
                               class="form-control"/>
            </div>
            <div class="modal-footer">
                <button type="button" 
                        class="btn btn-primary"
                        @onclick="HideModalAsync">Сохранить</button>
            </div>
        </div>
    </div>
</div>

@code {

    private Guid _selectedPhotoId;

    [Parameter] public required News News { get; init; }
    [Parameter] public required string Id { get; init; }

    protected override Task OnInitializedAsync()
    {
        _selectedPhotoId = News.Photos.Single(x => x.IsPrimary).Id;
        return base.OnInitializedAsync();
    }

    private void PrimaryPhotoSelected(Guid guid)
    {
        _selectedPhotoId = guid;
        Console.WriteLine($"Selected photo: {_selectedPhotoId}");
        StateHasChanged();
    }

    private async Task HideModalAsync()
    {
        await JsRuntime.InvokeVoidAsync("hideModal", $"#{Id}");
    }

}