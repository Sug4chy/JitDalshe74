@using JitDalshe.Ui.Admin.Api
@using JitDalshe.Ui.Admin.Api.News.Requests
@using JitDalshe.Ui.Admin.Extensions
@using JitDalshe.Ui.Admin.Models
@using JitDalshe.Ui.Admin.Components.Shared.Modals
@inject IJSRuntime JsRuntime
@inject IApiFacade Api
@inject IToastService ToastService

<Modal Id="@Id"
       Static="true"
       Title="Редактирование новости"
       OnClose="CloseModalAsync"
       FooterContentPosition="Modal.FooterPositioning.SpaceBetween"
       Footer="Modal.FooterType.Text | Modal.FooterType.Button"
       FooterText="@FooterText"
       FooterButtonText="Сохранить"
       OnFooterButtonClick="EditNewsAsync">
    @if (News.Images.Length > 0)
    {
        <div class="gap-3 horizontal-scroll">
            <InputRadioGroup class="mb-4"
                             TValue="GuidReference"
                             ValueChanged="e => PrimaryPhotoSelected(e)"
                             ValueExpression="() => _selectedPhotoId!">
                @foreach (var photo in News.Images)
                {
                    <label
                        class="image-radio @(photo.Id == _selectedPhotoId! ? "selected" : string.Empty)">
                        <InputRadio TValue="Guid"
                                    Value="photo.Id"
                                    style="display: none"/>
                        <img src="@photo.Url" class="img-thumbnail rounded" alt=""/>
                    </label>
                }
            </InputRadioGroup>
        </div>
    }
    <InputTextArea @bind-Value="_currentEnteredText"
                   style="width: 100%; height: 400px"
                   class="form-control"/>
</Modal>

@code {

    private GuidReference? _selectedPhotoId;
    private string _currentEnteredText = null!;
    private string FooterText => $"Опубликовано {News.PublishDate.ToString("dd-MM-yyyy")}";

    [Parameter] public required News News { get; init; }
    [Parameter] public required string Id { get; init; }
    [Parameter] public required EventCallback OnNewsEditedCallback { get; init; }

    private void RefreshFormFields()
    {
        _currentEnteredText = News.Text;
        _selectedPhotoId = News.Images.Length > 0
            ? new GuidReference { Value = News.Images.Single(x => x.IsPrimary).Id }
            : null;
    }

    private void PrimaryPhotoSelected(GuidReference guid)
    {
        _selectedPhotoId = guid;
    }

    private async Task HideModalAsync()
    {
        await JsRuntime.InvokeVoidAsync("hideModal", $"#{Id}");
    }

    private async Task CloseModalAsync()
    {
        RefreshFormFields();
        await HideModalAsync();
    }

    private async Task EditNewsAsync()
    {
        try
        {
            var news = await Api.EditNewsAsync(
                newsId: News.Id,
                request: new EditNewsRequest
                {
                    PrimaryPhotoId = _selectedPhotoId?.Value,
                    Text = _currentEnteredText
                },
                defaultValue: null,
                onValidationErrorCallback:
                    validationError => ToastService.ShowWarning(validationError.Errors.First().Value.First()),
                onNotFoundCallback: error => ToastService.ShowWarning(error.Message),
                onErrorCallback: error => ToastService.ShowError(error.Message)
            );
            if (news is not null)
            {
                ToastService.ShowSuccess("Новость успешно обновлена!");
                await HideModalAsync();
                await OnNewsEditedCallback.InvokeAsync();
            }
        }
        catch (Exception e)
        {
            ToastService.ShowPermanentError(e);
        }
    }

    protected override Task OnInitializedAsync()
    {
        RefreshFormFields();
        return base.OnInitializedAsync();
    }

}