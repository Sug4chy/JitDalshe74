@using JitDalshe.Ui.Admin.Api.News.Requests
@using JitDalshe.Ui.Admin.Components.Shared.Forms
@using JitDalshe.Ui.Admin.Components.Shared.Modals
@using JitDalshe.Ui.Admin.Models
@using JitDalshe.Ui.Admin.Services.ModalService
@using JitDalshe.Ui.Admin.Services.NewsService
@inject IModalService ModalService
@inject INewsService NewsService
@inject IToastService ToastService

<Modal Id="@Id"
       Static="true"
       Title="Редактирование новости"
       OnClose="CloseModalAsync"
       FooterContentPosition="Modal.FooterPositioning.SpaceBetween"
       Footer="Modal.FooterType.Text | Modal.FooterType.Button"
       FooterText="@FooterText"
       FooterButtonText="Сохранить"
       OnFooterButtonClick="EditNewsAsync">

    @if (News.Images.Length > 0)
    {
        <div class="gap-3 horizontal-scroll">
            <InputRadioGroup class="mb-4"
                             TValue="GuidReference"
                             ValueChanged="e => PrimaryPhotoSelected(e)"
                             ValueExpression="() => _selectedPhotoId!">
                @foreach (var photo in News.Images)
                {
                    <label
                        class="image-radio @(photo.Id == _selectedPhotoId! ? "selected" : string.Empty)">
                        <InputRadio TValue="Guid"
                                    Value="photo.Id"
                                    style="display: none"/>
                        <img src="@photo.Url" class="img-thumbnail rounded" alt=""/>
                    </label>
                }
            </InputRadioGroup>
        </div>
    }

    <TextAreaInput Label="Текст новости" @bind-Value="_currentEnteredText"/>

    <CheckboxInput Label="Отображать на сайте?" @bind-Value="_isDisplaying"/>

</Modal>

@code {

    private GuidReference? _selectedPhotoId;
    private string _currentEnteredText = null!;
    private bool _isDisplaying;
    private string FooterText => $"Опубликовано {News.PublishDate.ToString("dd-MM-yyyy")}";

    [Parameter] public required News News { get; init; }
    [Parameter] public required string Id { get; init; }
    [Parameter] public required EventCallback OnNewsEditedCallback { get; init; }

    private void RefreshFormFields()
    {
        _currentEnteredText = News.Text;
        _selectedPhotoId = News.Images.Length > 0
            ? new GuidReference { Value = News.Images.Single(x => x.IsPrimary).Id }
            : null;
        _isDisplaying = News.IsDisplaying;
    }

    private void PrimaryPhotoSelected(GuidReference guid)
    {
        _selectedPhotoId = guid;
    }

    private Task HideModalAsync()
        => ModalService.HideModalAsync($"#{Id}");

    private async Task CloseModalAsync()
    {
        RefreshFormFields();
        await HideModalAsync();
    }

    private async Task EditNewsAsync()
    {
        var request = new EditNewsRequest
        {
            PrimaryPhotoId = _selectedPhotoId?.Value,
            Text = _currentEnteredText,
            IsDisplaying = _isDisplaying
        };

        if (await NewsService.EditAsync(News.Id, request))
        {
            ToastService.ShowSuccess("Новость успешно обновлена!");
            await HideModalAsync();
            await OnNewsEditedCallback.InvokeAsync();
        }
    }

    protected override void OnInitialized()
    {
        RefreshFormFields();
    }

}