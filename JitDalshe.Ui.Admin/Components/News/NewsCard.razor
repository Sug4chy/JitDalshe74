@using JitDalshe.Ui.Admin.Api
@using JitDalshe.Ui.Admin.Extensions
@using JitDalshe.Ui.Admin.Models
@inject IJSRuntime JsRuntime
@inject IToastService ToastService
@inject IApiFacade Api

<div class="card mb-3">
    <div class="card-header">
        @News.PublishDate.ToString("dd-MM-yyyy")
    </div>
    <div class="card-body">
        <h5 class="card-title">@News.Title</h5>
    </div>
    <div class="card-footer">
        <div class="d-flex card-footer-buttons">
            <button type="button"
                    class="btn btn-primary"
                    data-toggle="modal"
                    data-target="@InfoModalId"
                    @onclick="ShowInfoModalAsync">
                Подробнее
            </button>
            <button type="button"
                    class="btn btn-secondary"
                    data-toggle="modal"
                    data-target="@EditModalId"
                    @onclick="ShowEditModalAsync">
                Изменить
            </button>
            <button type="button"
                    class="btn btn-danger"
                    @onclick="DeleteNewsAsync">
                Удалить
            </button>
        </div>
    </div>
</div>

<InfoNewsModal News="News" Id="@InfoModalId[1..]"/>
<EditNewsModal News="News" Id="@EditModalId[1..]" OnNewsEditedCallback="OnNewsEditedCallback"/>

@code {
    private string InfoModalId => $"#modal_{News.Id}";
    private string EditModalId => $"#modal_edit_{News.Id}";

    [Parameter] public required News News { get; init; }
    [Parameter] public required EventCallback OnNewsEditedCallback { get; init; }
    [Parameter] public required EventCallback OnNewsDeletedCallback { get; init; }

    private async Task ShowInfoModalAsync()
    {
        await JsRuntime.InvokeVoidAsync("showModal", InfoModalId);
    }

    private async Task ShowEditModalAsync()
    {
        await JsRuntime.InvokeVoidAsync("showModal", EditModalId);
    }

    private async Task DeleteNewsAsync()
    {
        try
        {
            if (await Api.DeleteNewsByIdAsync(
                    newsId: News.Id,
                    onNotFoundCallback: error => ToastService.ShowWarning(error.Message),
                    onErrorCallback: error => ToastService.ShowError(error.Message)))
            {
                ToastService.ShowSuccess("Новость успешно удалена!");
                await OnNewsDeletedCallback.InvokeAsync();
            }
        }
        catch (Exception e)
        {
            ToastService.ShowPermanentError(e);
        }
    }

}