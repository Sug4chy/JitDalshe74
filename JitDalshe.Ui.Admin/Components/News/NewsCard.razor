@using JitDalshe.Ui.Admin.Api
@using JitDalshe.Ui.Admin.Extensions
@using JitDalshe.Ui.Admin.Models
@using JitDalshe.Ui.Admin.Components.Shared.Cards
@inject IJSRuntime JsRuntime
@inject IToastService ToastService
@inject IApiFacade Api

<Card HeaderText="@CardHeaderText"
      Title="@News.Title"
      Buttons="Card.Button.Info | Card.Button.Edit | Card.Button.Delete"
      OnInfoButtonClick="@ShowInfoModalAsync"
      OnEditButtonClick="@ShowEditModalAsync"
      OnDeleteButtonClick="@DeleteNewsAsync"/>

<InfoNewsModal News="News" Id="@InfoModalId"/>
<EditNewsModal News="News" Id="@EditModalId" OnNewsEditedCallback="OnNewsEditedCallback"/>

@code {

    private string CardHeaderText => $"{News.PublishDate.ToString("dd-MM-yyyy")} ({News.DisplayingStatus})";
    private string InfoModalId => $"modal_info_news_{News.Id}";
    private string EditModalId => $"modal_edit_news_{News.Id}";

    [Parameter] public required News News { get; init; }
    [Parameter] public required EventCallback OnNewsEditedCallback { get; init; }
    [Parameter] public required EventCallback OnNewsDeletedCallback { get; init; }

    private async Task ShowInfoModalAsync()
    {
        await JsRuntime.InvokeVoidAsync("showModal", $"#{InfoModalId}");
    }

    private async Task ShowEditModalAsync()
    {
        await JsRuntime.InvokeVoidAsync("showModal", $"#{EditModalId}");
    }

    private async Task DeleteNewsAsync()
    {
        try
        {
            if (await Api.DeleteNewsByIdAsync(
                    newsId: News.Id,
                    onNotFoundCallback: error => ToastService.ShowWarning(error.Message),
                    onErrorCallback: error => ToastService.ShowError(error.Message)))
            {
                ToastService.ShowSuccess("Новость успешно удалена!");
                await OnNewsDeletedCallback.InvokeAsync();
            }
        }
        catch (Exception e)
        {
            ToastService.ShowPermanentError(e);
        }
    }

}