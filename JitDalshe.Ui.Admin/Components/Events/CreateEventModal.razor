@using JitDalshe.Ui.Admin.Api
@using JitDalshe.Ui.Admin.Api.Events.Requests
@using JitDalshe.Ui.Admin.Extensions
@using JitDalshe.Ui.Admin.Components.Shared
@inject IJSRuntime JsRuntime
@inject IApiFacade Api
@inject IToastService ToastService

<Modal Id="@Id"
       Static="true"
       Title="Создание нового события"
       OnClose="@CloseModalAsync"
       Footer="Modal.FooterType.Button"
       FooterButtonText="Сохранить"
       OnFooterButtonClick="@SubmitCreateEventAsync">
    <div class="image-upload-container">
        <label class="image-upload-label">
            <InputFile accept="image/*" OnChange="HandleFileUploadAsync" style="display: none"/>
            @if (_uploadedImageUrl is null)
            {
                <div class="image-upload-box rounded"
                     data-toggle="tooltip"
                     data-placement="top"
                     title="Загрузить изображение">
                    <div class="plus-sign">+</div>
                </div>
            }
            else
            {
                <img src="@_uploadedImageUrl"
                     alt=""
                     class="uploaded-image rounded"
                     data-toggle="tooltip"
                     data-placement="top"
                     title="Изменить изображение"/>
            }
        </label>
    </div>
    <label for="title-input">Заголовок</label>
    <InputText id="title-input"
               class="form-control"
               @bind-Value="_title"/>
    <label for="description-input">Описание</label>
    <InputTextArea id="description-input"
                   class="form-control"
                   @bind-Value="_description"/>
    <label for="date-input">Дата события</label>
    <InputDate id="date-input"
               TValue="DateTime"
               class="form-control"
               @bind-Value="_date"/>
</Modal>

@code {
    private string? _uploadedImageUrl;
    private string _title = string.Empty;
    private string _description = string.Empty;
    private DateTime _date = DateTime.Today;

    [Parameter] public required string Id { get; init; }
    [Parameter] public required EventCallback EventCreated { get; init; }

    private void ClearFields()
    {
        _uploadedImageUrl = null;
        _title = string.Empty;
        _description = string.Empty;
        _date = DateTime.Today;
    }

    private async Task CloseModalAsync()
    {
        ClearFields();
        await JsRuntime.InvokeVoidAsync("hideModal", $"#{Id}");
    }

    private async Task HandleFileUploadAsync(InputFileChangeEventArgs args)
    {
        var file = args.File;
        if (file is null)
        {
            return;
        }

        byte[] buffer = new byte[file.Size];
        await using var stream = file.OpenReadStream();
        int _ = await stream.ReadAsync(buffer);

        _uploadedImageUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task SubmitCreateEventAsync()
    {
        try
        {
            if (_uploadedImageUrl is null)
            {
                ToastService.ShowInfo("Пожалуйста, прикрепите изображение");
                return;
            }

            if (await Api.CreateEventAsync(
                    request: new CreateEventRequest(_title, _description, _date, _uploadedImageUrl),
                    onValidationErrorCallback:
                        validationError => ToastService.ShowWarning(validationError.Errors.First().Value.First()),
                    onClientErrorCallback: error => ToastService.ShowWarning(error.Message),
                    onServerErrorCallback: error => ToastService.ShowError(error.Message)))
            {
                await CloseModalAsync();
                ToastService.ShowSuccess("Событие было успешно создано!");
                await EventCreated.InvokeAsync();
            }
        }
        catch (Exception e)
        {
            ToastService.ShowPermanentError(e);
            await CloseModalAsync();
        }
    }

}