@using System.Net
@using JitDalshe.Ui.Admin.Api.Events
@using JitDalshe.Ui.Admin.Api.Events.Requests
@using JitDalshe.Ui.Admin.Extensions
@inject IJSRuntime JsRuntime
@inject IEventsApiClient EventsApiClient
@inject IToastService ToastService

<div id="@Id"
     class="modal fade"
     tabindex="-1"
     role="dialog"
     data-backdrop="static"
     data-keyboard="false">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Создание нового событие</h5>
                <button type="button" 
                        class="close" 
                        data-dismiss="modal" 
                        aria-label="Close"
                        @onclick="CloseModalAsync">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="image-upload-container">
                    <label class="image-upload-label">
                        <InputFile accept="image/*" OnChange="HandleFileUploadAsync" style="display: none"/>
                        @if (_uploadedImageUrl is null)
                        {
                            <div class="image-upload-box rounded"
                                 data-toggle="tooltip"
                                 data-placement="top"
                                 title="Загрузить изображение">
                                <div class="plus-sign">+</div>
                            </div>
                        }
                        else
                        {
                            <img src="@_uploadedImageUrl"
                                 alt=""
                                 class="uploaded-image rounded"
                                 data-toggle="tooltip"
                                 data-placement="top"
                                 title="Изменить изображение"/>
                        }
                    </label>
                </div>
                <label for="title-input">Заголовок</label>
                <InputText id="title-input"
                           class="form-control"
                           ValueExpression="@(() => _title)"
                           ValueChanged="@(e => _title = e ?? string.Empty)"/>
                <label for="description-input">Описание</label>
                <InputTextArea id="description-input"
                               class="form-control"
                               ValueExpression="@(() => _description)"
                               ValueChanged="@(e => _description = e ?? string.Empty)"/>
                <label for="date-input">Дата события</label>
                <InputDate id="date-input"
                           TValue="DateTime"
                           class="form-control"
                           @bind-Value="_date"/>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary"
                        type="button"
                        @onclick="SubmitCreateEventAsync">
                    Сохранить
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private string? _uploadedImageUrl;
    private string _title = string.Empty;
    private string _description = string.Empty;
    private DateTime _date = DateTime.Today;

    [Parameter] public required string Id { get; init; }
    [Parameter] public required EventCallback EventCreated { get; init; }

    private async Task CloseModalAsync()
    {
        await JsRuntime.InvokeVoidAsync("hideModal", $"#{Id}");
    }

    private async Task HandleFileUploadAsync(InputFileChangeEventArgs args)
    {
        var file = args.File;
        if (file is null)
        {
            return;
        }

        byte[] buffer = new byte[file.Size];
        await using var stream = file.OpenReadStream();
        int _ = await stream.ReadAsync(buffer);

        _uploadedImageUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task SubmitCreateEventAsync()
    {
        try
        {
            if (_uploadedImageUrl is null)
            {
                ToastService.ShowInfo("Пожалуйста, прикрепите изображение");
                return;
            }

            var response = await EventsApiClient.CreateEventAsync(
                new CreateEventRequest(_title, _description, _date, _uploadedImageUrl));
            if (response.StatusCode is HttpStatusCode.Created)
            {
                ToastService.ShowSuccess("Событие было успешно создано!");
                await EventCreated.InvokeAsync();
                await CloseModalAsync();
            }
            else
            {
                var error = response.Error!.DeserializeError();
                if ((int)response.StatusCode / 100 == 4)
                {
                    ToastService.ShowWarning(error.Message);
                }
                else
                {
                    ToastService.ShowError(error.Message);
                }
            }
        }
        catch (Exception e)
        {
            ToastService.ShowPermanentError(e);
            await CloseModalAsync();
        }
    }

}