@using JitDalshe.Ui.Admin.Api
@using JitDalshe.Ui.Admin.Api.Events.Requests
@using JitDalshe.Ui.Admin.Extensions
@using JitDalshe.Ui.Admin.Components.Shared.Modals
@using JitDalshe.Ui.Admin.Components.Shared.Forms
@using JitDalshe.Ui.Admin.Services.ModalService
@inject IApiFacade Api
@inject IToastService ToastService
@inject IModalService ModalService

<Modal Id="@Id"
       Static="true"
       Title="Создание нового события"
       OnClose="@CloseModalAsync"
       Footer="Modal.FooterType.Button"
       FooterButtonText="Сохранить"
       OnFooterButtonClick="@SubmitCreateEventAsync">

    <UploadFile @bind-FileUrl="_uploadedImageUrl"/>

    <TextInput Label="Заголовок" @bind-Value="_title"/>

    <TextAreaInput Label="Описание" @bind-Value="_description"/>

    <DateInput Label="Дата события" @bind-Value="_date"/>

    <CheckboxInput Label="Отображать на сайте?" @bind-Value="_isDisplaying"/>

</Modal>

@code {
    private string? _uploadedImageUrl;
    private string _title = string.Empty;
    private string _description = string.Empty;
    private DateTime _date = DateTime.Today;
    private bool _isDisplaying;

    [Parameter] public required string Id { get; init; }
    [Parameter] public required EventCallback EventCreated { get; init; }

    private void ClearFields()
    {
        _uploadedImageUrl = null;
        _title = string.Empty;
        _description = string.Empty;
        _date = DateTime.Today;
        _isDisplaying = false;
    }

    private Task CloseModalAsync()
    {
        ClearFields();
        return ModalService.HideModalAsync($"#{Id}");
    }

    private async Task SubmitCreateEventAsync()
    {
        try
        {
            if (_uploadedImageUrl is null)
            {
                ToastService.ShowInfo("Пожалуйста, прикрепите изображение");
                return;
            }

            if (await Api.CreateEventAsync(
                    request: new CreateEventRequest(_title, _description, _date, _uploadedImageUrl, _isDisplaying),
                    onValidationErrorCallback:
                        validationError => ToastService.ShowWarning(validationError.Errors.First().Value.First()),
                    onClientErrorCallback: error => ToastService.ShowWarning(error.Message),
                    onServerErrorCallback: error => ToastService.ShowError(error.Message)))
            {
                await CloseModalAsync();
                ToastService.ShowSuccess("Событие было успешно создано!");
                await EventCreated.InvokeAsync();
            }
        }
        catch (Exception e)
        {
            ToastService.ShowPermanentError(e);
            await CloseModalAsync();
        }
    }

}