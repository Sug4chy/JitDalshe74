@using JitDalshe.Ui.Admin.Api.Events.Requests
@using JitDalshe.Ui.Admin.Components.Shared.Forms
@using JitDalshe.Ui.Admin.Components.Shared.Modals
@using JitDalshe.Ui.Admin.Models.Forms
@using JitDalshe.Ui.Admin.Services.EventService
@using JitDalshe.Ui.Admin.Services.ModalService
@inject IEventService EventService
@inject IToastService ToastService
@inject IModalService ModalService

<Modal Id="@Id"
       Static="true"
       Title="Создание нового события"
       OnClose="@CloseModalAsync"
       Footer="Modal.FooterType.Button"
       FooterButtonText="Сохранить"
       OnFooterButtonClick="@SubmitCreateEventAsync">

    <EditForm EditContext="@_editContext">
        <FluentValidationValidator @ref="_fluentValidationValidator"/>

        <UploadFile @bind-FileUrl="_formModel.UploadedImageUrl"/>

        <TextInput Label="Заголовок" @bind-Value="_formModel.Title"/>

        <TextAreaInput Label="Описание" @bind-Value="_formModel.Description"/>

        <DateInput Label="Дата события" @bind-Value="_formModel.Date"/>

        <CheckboxInput Label="Отображать на сайте?" @bind-Value="_formModel.IsDisplaying"/>

    </EditForm>

</Modal>

@code {

    private EventFormModel _formModel = null!;
    private EditContext? _editContext;
    private FluentValidationValidator? _fluentValidationValidator;

    [Parameter] public required string Id { get; init; }
    [Parameter] public required EventCallback EventCreated { get; init; }

    private void ClearFields(bool isInitializing)
    {
        _formModel = new EventFormModel();
        _editContext = new EditContext(_formModel);
        if (!isInitializing)
        {
            StateHasChanged();
        }
    }

    private Task CloseModalAsync()
    {
        ClearFields(false);
        return ModalService.HideModalAsync($"#{Id}");
    }

    private async Task SubmitCreateEventAsync()
    {
        if (!await _fluentValidationValidator!.ValidateAsync())
        {
            return;
        }

        var request = new CreateEventRequest(
            _formModel.Title, 
            _formModel.Description, 
            _formModel.Date, 
            _formModel.UploadedImageUrl!, 
            _formModel.IsDisplaying);
        if (await EventService.CreateEventAsync(request))
        {
            await CloseModalAsync();
            ToastService.ShowSuccess("Событие было успешно создано!");
            await EventCreated.InvokeAsync();
        }
    }

    protected override void OnInitialized()
    {
        ClearFields(true);
    }

}