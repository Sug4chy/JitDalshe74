@using JitDalshe.Ui.Admin.Api.Events.Requests
@using JitDalshe.Ui.Admin.Components.Shared.Forms
@using JitDalshe.Ui.Admin.Components.Shared.Modals
@using JitDalshe.Ui.Admin.Models
@using JitDalshe.Ui.Admin.Models.Forms
@using JitDalshe.Ui.Admin.Services.EventService
@using JitDalshe.Ui.Admin.Services.ModalService
@inject IModalService ModalService
@inject IEventService EventService
@inject IToastService ToastService

<Modal Id="@Id"
       Static="true"
       Title="Редактирование события"
       OnClose="@CloseModalAsync"
       Footer="Modal.FooterType.Button"
       FooterButtonText="Сохранить"
       OnFooterButtonClick="@SubmitEditEventAsync">

    <EditForm EditContext="@_editContext">
        <FluentValidationValidator @ref="_fluentValidationValidator"/>

        <UploadFile @bind-FileUrl="_formModel.UploadedImageUrl"/>

        <TextInput Label="Заголовок" @bind-Value="_formModel.Title"/>

        <TextAreaInput Label="Описание" @bind-Value="_formModel.Description"/>

        <DateInput Label="Дата события" @bind-Value="_formModel.Date"/>

        <CheckboxInput Label="Отображать на сайте?" @bind-Value="_formModel.IsDisplaying"/>
    </EditForm>

</Modal>

@code {
    private EventFormModel _formModel = null!;
    private EditContext? _editContext;
    private FluentValidationValidator? _fluentValidationValidator;

    [Parameter] public required string Id { get; init; }
    [Parameter] public required Event Event { get; init; }
    [Parameter] public required EventCallback EventEdited { get; init; }

    private void InitializeFields(bool isInitializing)
    {
        _formModel = new EventFormModel(
            uploadedImageUrl: Event.ImageUrl,
            title: Event.Title,
            description: Event.Description ?? string.Empty,
            date: Event.Date.ToDateTime(TimeOnly.MinValue),
            isDisplaying: Event.IsDisplaying
        );
        _editContext = new EditContext(_formModel);
        if (!isInitializing)
        {
            StateHasChanged();
        }
    }

    private Task HideModalAsync()
        => ModalService.HideModalAsync($"#{Id}");

    private async Task CloseModalAsync()
    {
        InitializeFields(false);
        await HideModalAsync();
    }

    private async Task SubmitEditEventAsync()
    {
        if (!await _fluentValidationValidator!.ValidateAsync())
        {
            return;
        }

        var request = new EditEventRequest(
            Title: _formModel.Title,
            Description: _formModel.Description,
            Date: _formModel.Date,
            ImageBase64Url: _formModel.UploadedImageUrl!,
            IsDisplaying: _formModel.IsDisplaying);
        if (await EventService.EditEventAsync(Event.Id, request))
        {
            if (_formModel.UploadedImageUrl != Event.ImageUrl)
            {
                await EventService.ReplaceEventImageAsync(
                    Event.Id, new ReplaceEventImageRequest(_formModel.UploadedImageUrl!)
                );
            }

            await CloseModalAsync();
            ToastService.ShowSuccess("Событие успешно отредактировано");
            await EventEdited.InvokeAsync();
        }
    }

    protected override void OnInitialized()
    {
        InitializeFields(true);
    }

}