@using JitDalshe.Ui.Admin.Api.Events.Requests
@using JitDalshe.Ui.Admin.Components.Shared.Forms
@using JitDalshe.Ui.Admin.Components.Shared.Modals
@using JitDalshe.Ui.Admin.Models
@using JitDalshe.Ui.Admin.Services.EventService
@using JitDalshe.Ui.Admin.Services.ModalService
@inject IModalService ModalService
@inject IEventService EventService
@inject IToastService ToastService

<Modal Id="@Id"
       Static="true"
       Title="Редактирование события"
       OnClose="@CloseModalAsync"
       Footer="Modal.FooterType.Button"
       FooterButtonText="Сохранить"
       OnFooterButtonClick="@SubmitEditEventAsync">

    <UploadFile @bind-FileUrl="_currentImageUrl"/>

    <TextInput Label="Заголовок" @bind-Value="_title"/>

    <TextAreaInput Label="Описание" @bind-Value="_description"/>

    <DateInput Label="Дата события" @bind-Value="_date"/>

    <CheckboxInput Label="Отображать на сайте?" @bind-Value="_isDisplaying"/>

</Modal>

@code {
    private string _currentImageUrl = null!;
    private string _title = null!;
    private string _description = null!;
    private DateTime _date;
    private bool _isDisplaying;

    [Parameter] public required string Id { get; init; }
    [Parameter] public required Event Event { get; init; }
    [Parameter] public required EventCallback EventEdited { get; init; }

    private void InitializeFields()
    {
        _currentImageUrl = Event.ImageUrl;
        _title = Event.Title;
        _description = Event.Description ?? string.Empty;
        _date = Event.Date.ToDateTime(TimeOnly.MinValue);
        _isDisplaying = Event.IsDisplaying;
    }

    private Task HideModalAsync()
        => ModalService.HideModalAsync($"#{Id}");

    private async Task CloseModalAsync()
    {
        InitializeFields();
        await HideModalAsync();
    }

    private async Task SubmitEditEventAsync()
    {
        var request = new EditEventRequest(
            Title: _title,
            Description: _description,
            Date: _date,
            ImageBase64Url: _currentImageUrl,
            IsDisplaying: _isDisplaying);
        if (await EventService.EditEventAsync(Event.Id, request))
        {
            if (_currentImageUrl != Event.ImageUrl)
            {
                await EventService.ReplaceEventImageAsync(Event.Id, new ReplaceEventImageRequest(_currentImageUrl));
            }

            await HideModalAsync();
            ToastService.ShowSuccess("Событие успешно отредактировано");
            await EventEdited.InvokeAsync();
        }
    }

    protected override Task OnInitializedAsync()
    {
        InitializeFields();
        return base.OnInitializedAsync();
    }

}