@using JitDalshe.Ui.Admin.Api
@using JitDalshe.Ui.Admin.Extensions
@using JitDalshe.Ui.Admin.Models
@inject IJSRuntime JsRuntime
@inject IApiFacade Api
@inject IToastService ToastService

<div class="card mb-3">
    <div class="card-header">
        @Event.Date.ToString("dd-MM-yyyy")
    </div>
    <div class="card-body">
        <h5 class="card-title">@Event.Title</h5>
    </div>
    <div class="card-footer">
        <div class="d-flex footer-buttons">
            <button type="button"
                    class="btn btn-primary"
                    data-toggle="modal"
                    @onclick="ShowInfoEventModalAsync">
                Подробнее
            </button>
            <button type="button"
                    class="btn btn-secondary"
                    data-toggle="modal"
                    @onclick="ShowEditEventModalAsync">
                Изменить
            </button>
            <button type="button"
                    class="btn btn-danger"
                    @onclick="DeleteEventAsync">
                Удалить
            </button>
        </div>
    </div>
</div>

<EditEventModal Id="@EditEventModalId" Event="@Event" EventEdited="@OnEventEditedCallback"/>
<InfoEventModal Id="@InfoEventModalId" Event="Event"/>

@code {
    private string EditEventModalId => $"modal_edit_{Event.Id}";
    private string InfoEventModalId => $"modal_info_{Event.Id}";

    [Parameter] public required Event Event { get; init; }
    [Parameter] public required EventCallback OnEventEditedCallback { get; init; }
    [Parameter] public required EventCallback OnEventDeletedCallback { get; init; }

    private async Task ShowInfoEventModalAsync()
    {
        await JsRuntime.InvokeVoidAsync("showModal", $"#{InfoEventModalId}");
    }

    private async Task ShowEditEventModalAsync()
    {
        await JsRuntime.InvokeVoidAsync("showModal", $"#{EditEventModalId}");
    }

    private async Task DeleteEventAsync()
    {
        try
        {
            if (await Api.DeleteEventAsync(
                    eventId: Event.Id,
                    onClientErrorCallback: error => ToastService.ShowWarning(error.Message),
                    onServerErrorCallback: error => ToastService.ShowError(error.Message)))
            {
                ToastService.ShowSuccess("Событие успешно удалено");
                await OnEventDeletedCallback.InvokeAsync();
            }
        }
        catch (Exception e)
        {
            ToastService.ShowPermanentError(e);
        }
    }

}