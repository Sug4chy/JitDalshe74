@using JitDalshe.Ui.Admin.Api
@using JitDalshe.Ui.Admin.Extensions
@using JitDalshe.Ui.Admin.Models
@using JitDalshe.Ui.Admin.Components.Shared.Cards
@inject IJSRuntime JsRuntime
@inject IApiFacade Api
@inject IToastService ToastService

<Card HeaderText="@CardHeaderText"
      Title="@Event.Title"
      Buttons="Card.Button.Info | Card.Button.Edit | Card.Button.Delete"
      OnInfoButtonClick="@ShowInfoEventModalAsync"
      OnEditButtonClick="@ShowEditEventModalAsync"
      OnDeleteButtonClick="@DeleteEventAsync"/>

<EditEventModal Id="@EditEventModalId" Event="@Event" EventEdited="@OnEventEditedCallback"/>
<InfoEventModal Id="@InfoEventModalId" Event="Event"/>

@code {

    private string CardHeaderText => $"{Event.Date.ToString("dd-MM-yyyy")} ({Event.DisplayingStatus})";
    private string EditEventModalId => $"modal_edit_event_{Event.Id}";
    private string InfoEventModalId => $"modal_info_event_{Event.Id}";

    [Parameter] public required Event Event { get; init; }
    [Parameter] public required EventCallback OnEventEditedCallback { get; init; }
    [Parameter] public required EventCallback OnEventDeletedCallback { get; init; }

    private async Task ShowInfoEventModalAsync()
    {
        await JsRuntime.InvokeVoidAsync("showModal", $"#{InfoEventModalId}");
    }

    private async Task ShowEditEventModalAsync()
    {
        await JsRuntime.InvokeVoidAsync("showModal", $"#{EditEventModalId}");
    }

    private async Task DeleteEventAsync()
    {
        try
        {
            if (await Api.DeleteEventAsync(
                    eventId: Event.Id,
                    onClientErrorCallback: error => ToastService.ShowWarning(error.Message),
                    onServerErrorCallback: error => ToastService.ShowError(error.Message)))
            {
                ToastService.ShowSuccess("Событие успешно удалено");
                await OnEventDeletedCallback.InvokeAsync();
            }
        }
        catch (Exception e)
        {
            ToastService.ShowPermanentError(e);
        }
    }

}