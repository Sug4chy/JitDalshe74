@using System.Linq.Expressions

<div class="image-upload-container">
    <label class="@Style">
        <InputFile accept="image/*" OnChange="HandleFileUploadAsync" style="display: none;"/>
        @if (FileUrl is null)
        {
            <div class="image-upload-box rounded"
                 data-toggle="tooltip"
                 data-placement="top"
                 title="Загрузить изображение">
                <div class="plus-sign">+</div>
            </div>
        }
        else
        {
            <img src="@FileUrl"
                 alt=""
                 class="uploaded-image rounded"
                 data-toggle="tooltip"
                 data-placement="top"
                 title="Изменить изображение"/>
        }
    </label>
</div>
<div style="display: flex; justify-content: center">
    <ValidationMessage For="@FileUrlExpression"/>
</div>

@code {

    [CascadingParameter] EditContext? EditContext { get; set; }
    private FieldIdentifier _fieldIdentifier;

    private string Style => EditContext?.GetValidationMessages(_fieldIdentifier).Any() is true
        ? "image-upload-label is-invalid"
        : "image-upload-label";

    [Parameter] public string? FileUrl { get; set; }
    [Parameter] public EventCallback<string?> FileUrlChanged { get; set; }
    [Parameter] public Expression<Func<string?>> FileUrlExpression { get; set; } = null!;

    private async Task HandleFileUploadAsync(InputFileChangeEventArgs args)
    {
        var file = args.File;
        if (file is null)
        {
            return;
        }

        byte[] buffer = new byte[file.Size];
        await using var stream = file.OpenReadStream();
        int _ = await stream.ReadAsync(buffer);

        FileUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
        await FileUrlChanged.InvokeAsync(FileUrl);
    }

    protected override void OnParametersSet()
    {
        _fieldIdentifier = FieldIdentifier.Create(FileUrlExpression);
    }

}