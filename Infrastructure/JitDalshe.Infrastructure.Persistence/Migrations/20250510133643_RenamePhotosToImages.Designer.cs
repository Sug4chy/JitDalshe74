// <auto-generated />
using System;
using JitDalshe.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JitDalshe.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(PostgresqlDbContext))]
    [Migration("20250510133643_RenamePhotosToImages")]
    partial class RenamePhotosToImages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JitDalshe.Domain.Entities.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.Events.EventImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("event_image", (string)null);
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.News.News", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("ExtId")
                        .HasColumnType("bigint")
                        .HasColumnName("ext_id");

                    b.Property<DateOnly>("PublicationDate")
                        .HasColumnType("date")
                        .HasColumnName("publication_date");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ExtId")
                        .IsUnique();

                    b.ToTable("news", (string)null);
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.News.NewsImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("ExtId")
                        .HasColumnType("bigint")
                        .HasColumnName("ext_id");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uri");

                    b.HasKey("Id");

                    b.HasIndex("ExtId")
                        .IsUnique();

                    b.HasIndex("NewsId");

                    b.ToTable("news_image", (string)null);
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.News.NewsPrimaryImage", b =>
                {
                    b.Property<Guid>("NewsId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_id");

                    b.Property<Guid>("NewsImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_image_id");

                    b.HasKey("NewsId", "NewsImageId");

                    b.HasIndex("NewsId")
                        .IsUnique();

                    b.HasIndex("NewsImageId")
                        .IsUnique();

                    b.ToTable("news_primary_image", (string)null);
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.Events.EventImage", b =>
                {
                    b.HasOne("JitDalshe.Domain.Entities.Events.Event", "Event")
                        .WithOne("Image")
                        .HasForeignKey("JitDalshe.Domain.Entities.Events.EventImage", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.News.NewsImage", b =>
                {
                    b.HasOne("JitDalshe.Domain.Entities.News.News", "News")
                        .WithMany("Images")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.News.NewsPrimaryImage", b =>
                {
                    b.HasOne("JitDalshe.Domain.Entities.News.News", "News")
                        .WithOne("PrimaryImage")
                        .HasForeignKey("JitDalshe.Domain.Entities.News.NewsPrimaryImage", "NewsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JitDalshe.Domain.Entities.News.NewsImage", "NewsImage")
                        .WithOne("PrimaryPhoto")
                        .HasForeignKey("JitDalshe.Domain.Entities.News.NewsPrimaryImage", "NewsImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("NewsImage");
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.Events.Event", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.News.News", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("PrimaryImage");
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.News.NewsImage", b =>
                {
                    b.Navigation("PrimaryPhoto");
                });
#pragma warning restore 612, 618
        }
    }
}
