// <auto-generated />
using System;
using JitDalshe.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JitDalshe.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(PostgresqlDbContext))]
    [Migration("20250509162312_AddEventSubdomainTables")]
    partial class AddEventSubdomainTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JitDalshe.Domain.Entities.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.Events.EventPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("event_photo", (string)null);
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.News.News", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("ExtId")
                        .HasColumnType("bigint")
                        .HasColumnName("ext_id");

                    b.Property<DateOnly>("PublicationDate")
                        .HasColumnType("date")
                        .HasColumnName("publication_date");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ExtId")
                        .IsUnique();

                    b.ToTable("news", (string)null);
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.News.NewsPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("ExtId")
                        .HasColumnType("bigint")
                        .HasColumnName("ext_id");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uri");

                    b.HasKey("Id");

                    b.HasIndex("ExtId")
                        .IsUnique();

                    b.HasIndex("NewsId");

                    b.ToTable("news_photo", (string)null);
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.News.NewsPrimaryPhoto", b =>
                {
                    b.Property<Guid>("NewsId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_id");

                    b.Property<Guid>("NewsPhotoId")
                        .HasColumnType("uuid")
                        .HasColumnName("news_photo_id");

                    b.HasKey("NewsId", "NewsPhotoId");

                    b.HasIndex("NewsId")
                        .IsUnique();

                    b.HasIndex("NewsPhotoId")
                        .IsUnique();

                    b.ToTable("news_primary_photo", (string)null);
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.Events.EventPhoto", b =>
                {
                    b.HasOne("JitDalshe.Domain.Entities.Events.Event", "Event")
                        .WithOne("Photo")
                        .HasForeignKey("JitDalshe.Domain.Entities.Events.EventPhoto", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.News.NewsPhoto", b =>
                {
                    b.HasOne("JitDalshe.Domain.Entities.News.News", "News")
                        .WithMany("Photos")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.News.NewsPrimaryPhoto", b =>
                {
                    b.HasOne("JitDalshe.Domain.Entities.News.News", "News")
                        .WithOne("PrimaryPhoto")
                        .HasForeignKey("JitDalshe.Domain.Entities.News.NewsPrimaryPhoto", "NewsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JitDalshe.Domain.Entities.News.NewsPhoto", "NewsPhoto")
                        .WithOne("PrimaryPhoto")
                        .HasForeignKey("JitDalshe.Domain.Entities.News.NewsPrimaryPhoto", "NewsPhotoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("NewsPhoto");
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.Events.Event", b =>
                {
                    b.Navigation("Photo");
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.News.News", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("PrimaryPhoto");
                });

            modelBuilder.Entity("JitDalshe.Domain.Entities.News.NewsPhoto", b =>
                {
                    b.Navigation("PrimaryPhoto");
                });
#pragma warning restore 612, 618
        }
    }
}
